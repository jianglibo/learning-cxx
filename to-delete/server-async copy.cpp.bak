#include <iostream>
#include <boost/asio.hpp>
#include <boost/bind/bind.hpp>

using boost::asio::ip::tcp;

class tcp_connection : public std::enable_shared_from_this<tcp_connection>
{
public:
  using pointer = std::shared_ptr<tcp_connection>;

  static pointer create(boost::asio::io_context &io_context,
                        const std::string &proxy_address, const std::string &proxy_port, bool debug_mode = false)
  {
    return pointer(new tcp_connection(io_context, proxy_address, proxy_port));
  }

  tcp::socket &socket() { return socket_; }

  void start()
  {
    do_read_client();
  }

private:
  tcp_connection(boost::asio::io_context &io_context,
                 const std::string &proxy_address, const std::string &proxy_port, bool debug_mode = false)
      : socket_(io_context),
        remote_socket_(io_context),
        resolver_(io_context),
        proxy_address_(proxy_address),
        proxy_port_(proxy_port),
        debug_mode(debug_mode),
        header_state_(HeaderState::READING_HEADERS)
  {
  }

  // void do_write_in_chunks(const std::string &request)
  // {
  //   auto self(shared_from_this());
  //   std::size_t total_length = request.size();
  //   std::size_t bytes_sent = 0;

  //   // Loop to send the request in chunks if it's larger than max_length
  //   while (bytes_sent < total_length)
  //   {
  //     std::size_t chunk_size = std::min(static_cast<size_t>(max_length), total_length - bytes_sent);
  //     std::memcpy(data_, request.data() + bytes_sent, chunk_size);

  //     // Perform the async write operation for each chunk
  //     boost::asio::async_write(remote_socket_, boost::asio::buffer(data_, chunk_size),
  //                              [this, self, &bytes_sent, total_length, &request](boost::system::error_code ec, std::size_t length)
  //                              {
  //                                if (ec)
  //                                {
  //                                  std::cerr << "Error writing to proxy server: " << ec.message() << std::endl;
  //                                  cleanup();
  //                                  return;
  //                                }
  //                                bytes_sent += length;

  //                                // If we still have data to send, continue
  //                                if (bytes_sent < total_length)
  //                                {
  //                                  do_write_in_chunks(request);
  //                                }
  //                                else
  //                                {
  //                                  // After writing all chunks, continue with the next operation
  //                                  do_read_remote();
  //                                }
  //                              });
  //   }
  // }

  bool has_complete_http_request(const std::string &request)
  {
    // A simple check to see if the request ends with \r\n\r\n (headers end)
    return request.find("\r\n\r\n") != std::string::npos;
  }

  std::string parse_http_request(const std::string &request)
  {
    std::istringstream request_stream(request);
    std::string method, url, version;
    std::string line;
    std::stringstream new_request;

    // Read the first line (request line)
    if (std::getline(request_stream, line))
    {
      std::istringstream line_stream(line);
      line_stream >> method >> url >> version;
      std::cout << line << std::endl;

      // // If it's an HTTP proxy request (contains a full URL starting with "http://")
      // if (url.substr(0, 7) == "http://")
      // {
      //   auto pos = url.find('/', 7); // Find the first '/' after "http://"
      //   if (pos != std::string::npos)
      //   {
      //     url = url.substr(pos); // Strip the "http://hostname" part, keep only the path
      //   }
      // }

      // Construct the new request line with the modified URL (if needed)
      new_request << method << " " << url << " " << version << "\r\n";
    }

    // Add the remaining headers and body
    while (std::getline(request_stream, line))
    {
      new_request << line << "\n";
      std::cout << "Header: " << line << std::endl;
    }

    return new_request.str();
  }

  size_t get_content_length(const std::string &request)
  {
    std::istringstream stream(request);
    std::string line;
    size_t content_length = 0;

    // Search for the Content-Length header
    while (std::getline(stream, line) && line != "\r")
    {
      if (line.find("Content-Length:") != std::string::npos)
      {
        content_length = std::stoi(line.substr(16)); // Extract the Content-Length value
      }
    }

    return content_length;
  }

  // bool has_complete_http_request(const std::string &request)
  // {
  //   // Check for headers completion
  //   size_t header_end = request.find("\r\n\r\n");
  //   if (header_end == std::string::npos)
  //     return false;

  //   // Check if there's a body and if we have received it fully
  //   size_t content_length = get_content_length(request);
  //   if (content_length > 0)
  //   {
  //     size_t total_length = header_end + 4 + content_length; // Headers + Body
  //     return request.size() >= total_length;
  //   }

  //   // No body, the request is complete with just headers
  //   return true;
  // }

  void do_read_client()
  {
    auto self(shared_from_this());
    std::cout << "do_read_client get called." << std::endl;
    socket_.async_read_some(boost::asio::buffer(data_, max_length),
                            [this, self](boost::system::error_code ec, std::size_t length)
                            {
                              std::cout << "do_read_client get completed." << std::endl;
                              if (ec)
                              {
                                if (ec == boost::asio::error::eof)
                                {
                                  // Connection closed cleanly by the client
                                  std::cout << "Client closed connection" << std::endl;
                                }
                                else
                                {
                                  std::cerr << "Error reading from client: " << ec.message() << std::endl;
                                }
                                cleanup();
                                return;
                              }
                              if (debug_mode)
                              {
                                if (header_state_ == HeaderState::READING_HEADERS)
                                {
                                  // Accumulate the received data into the request buffer
                                  request_buffer_.append(data_, length);
                                  std::cout << "Data read from client, length: " << length << std::endl;

                                  // Check if we have received a full HTTP request (i.e., headers end with \r\n\r\n)
                                  if (has_complete_http_request(request_buffer_))
                                  {
                                    // Process the full HTTP request
                                    std::string modified_request = parse_http_request(request_buffer_);
                                    // Clear the buffer and continue processing the request
                                    request_buffer_.clear();

                                    // if modified_request.size() > max_length, we need to send it in chunks
                                    std::size_t total_length = modified_request.size();
                                    std::size_t bytes_sent = 0;

                                    // Loop to send the request in chunks if it's larger than max_length
                                    while (bytes_sent < total_length)
                                    {
                                      std::size_t chunk_size = std::min(static_cast<size_t>(max_length), total_length - bytes_sent);
                                      std::memcpy(data_, modified_request.data() + bytes_sent, chunk_size);
                                      do_write_proxy(modified_request.size());
                                    }
                                  }
                                  else
                                  {
                                    // Not a complete request yet, continue reading
                                    do_read_client();
                                  }
                                }
                                else if (header_state_ == HeaderState::READING_BODY)
                                {
                                  do_write_proxy(length);
                                }
                              }
                              else
                              {
                                do_write_proxy(length);
                              }
                            });
  }

  void do_write_proxy(std::size_t length)
  {
    auto self(shared_from_this());
    if (!remote_socket_.is_open())
    {
      resolver_.async_resolve(proxy_address_, proxy_port_,
                              [this, self, length](boost::system::error_code ec, tcp::resolver::results_type endpoints)
                              {
                                if (!ec)
                                {
                                  boost::asio::async_connect(remote_socket_, endpoints,
                                                             [this, self, length](boost::system::error_code ec, const tcp::endpoint &)
                                                             {
                                                               if (!ec)
                                                               {
                                                                 std::cout << "Connected to proxy server" << std::endl;
                                                                 _do_write_proxy(length);
                                                               }
                                                               else
                                                               {
                                                                 std::cerr << "Error connecting to proxy server: " << ec.message() << std::endl;
                                                                 cleanup();
                                                               }
                                                             });
                                }
                                else
                                {
                                  std::cerr << "Error resolving proxy address: " << ec.message() << std::endl;
                                  cleanup();
                                }
                              });
    }
    else
    {
      _do_write_proxy(length);
    }
  }

  void _do_write_proxy(std::size_t length)
  {
    auto self(shared_from_this());
    boost::asio::async_write(remote_socket_, boost::asio::buffer(data_, length),
                             [this, self](boost::system::error_code ec, std::size_t)
                             {
                               if (!ec)
                               {
                                 std::cout << "Data written to proxy server" << std::endl;
                                 do_read_proxy();
                               }
                               else
                               {
                                 std::cerr << "Error writing to proxy server: " << ec.message() << std::endl;
                                 cleanup();
                               }
                             });
  }

  void do_read_proxy()
  {
    auto self(shared_from_this());
    remote_socket_.async_read_some(boost::asio::buffer(data_, max_length),
                                   [this, self](boost::system::error_code ec, std::size_t length)
                                   {
                                     if (ec)
                                     {
                                       if (ec == boost::asio::error::eof)
                                       {
                                         std::cout << "Proxy server closed connection" << std::endl;
                                       }
                                       else
                                       {
                                         std::cerr << "Error reading from proxy server: " << ec.message() << std::endl;
                                       }
                                       cleanup();
                                       return;
                                     }
                                     std::cout << "Data read from proxy server, length: " << length << std::endl;
                                     do_write_client(length);
                                     do_read_proxy();
                                   });
  }

  void do_write_client(std::size_t length)
  {
    auto self(shared_from_this());
    boost::asio::async_write(socket_, boost::asio::buffer(data_, length),
                             [this, self](boost::system::error_code ec, std::size_t)
                             {
                               if (!ec)
                               {
                                 std::cout << "Data written to client, read more from proxy" << std::endl;
                                 do_read_client();
                                 //  do_read_proxy();
                               }
                               else
                               {
                                 std::cerr << "Error writing to client: " << ec.message() << std::endl;
                                 cleanup();
                               }
                             });
  }

  void cleanup()
  {
    // Close both sockets
    boost::system::error_code ec;
    if (socket_.is_open())
      socket_.close(ec);
    if (remote_socket_.is_open())
      remote_socket_.close(ec);

    if (ec)
    {
      std::cerr << "Error during cleanup: " << ec.message() << std::endl;
    }
  }

  enum class HeaderState
  {
    READING_HEADERS,
    READING_BODY
  };

  tcp::socket socket_;
  tcp::socket remote_socket_;
  tcp::resolver resolver_;
  std::string proxy_address_;
  std::string proxy_port_;
  std::string request_buffer_;
  bool debug_mode;
  HeaderState header_state_;

  enum
  {
    max_length = 4096
  };
  char data_[max_length];
};

class tcp_server
{
public:
  tcp_server(boost::asio::io_context &io_context, const std::string &proxy_address, const std::string &proxy_port, bool debug_mode = false)
      : io_context_(io_context),
        acceptor_(io_context, tcp::endpoint(tcp::v4(), 7890)),
        proxy_address_(proxy_address),
        proxy_port_(proxy_port),
        debug_mode(debug_mode)
  {
    start_accept();
  }

private:
  void start_accept()
  {
    auto new_connection = tcp_connection::create(io_context_, proxy_address_, proxy_port_, debug_mode);

    acceptor_.async_accept(new_connection->socket(),
                           [this, new_connection](boost::system::error_code ec)
                           {
                             if (!ec)
                             {
                               std::cout << "Accepted new connection" << std::endl;
                               new_connection->start();
                             }
                             else
                             {
                               std::cerr << "Error accepting connection: " << ec.message() << std::endl;
                             }
                             start_accept();
                           });
  }

  boost::asio::io_context &io_context_;
  tcp::acceptor acceptor_;
  std::string proxy_address_;
  std::string proxy_port_;
  bool debug_mode;
};

int main()
{
  try
  {
    boost::asio::io_context io_context;
    tcp_server server(io_context, "192.168.0.90", "8000");
    io_context.run();
  }
  catch (std::exception &e)
  {
    std::cerr << "Exception: " << e.what() << std::endl;
  }

  return 0;
}